var documenterSearchIndex = {"docs":
[{"location":"#API","page":"API","title":"API","text":"","category":"section"},{"location":"#General-functionalities","page":"API","title":"General functionalities","text":"","category":"section"},{"location":"","page":"API","title":"API","text":"itsample","category":"page"},{"location":"#StreamSampling.itsample","page":"API","title":"StreamSampling.itsample","text":"itsample([rng], iter, method = algL)\nitsample([rng], iter, wv, method = algAExpJ)\n\nReturn a random element of the iterator, optionally specifying a rng  (which defaults to Random.default_rng()) and a wv function. If the iterator is empty, it returns nothing.\n\n\n\nitsample([rng], iter, method = algL; ordered = false)\nitsample([rng], iter, wv, method = algAExpJ; ordered = false)\n\nReturn a vector of n random elements of the iterator,  optionally specifying a rng (which defaults to Random.default_rng()) and a method. ordered dictates whether an ordered sample (also called a sequential  sample, i.e. a sample where items appear in the same order as in iter) must be  collected.\n\nIf the iterator has less than n elements, in the case of sampling without replacement, it returns a vector of those elements.\n\n\n\n\n\n","category":"function"},{"location":"#Implemented-ALgorithms","page":"API","title":"Implemented ALgorithms","text":"","category":"section"},{"location":"","page":"API","title":"API","text":"StreamSampling.AlgL\nStreamSampling.AlgR\nStreamSampling.AlgRSWRSKIP\nStreamSampling.AlgAExpJ\nStreamSampling.AlgARes\nStreamSampling.AlgWRSWRSKIP\nStreamSampling.sortedindices_sample","category":"page"},{"location":"#StreamSampling.AlgL","page":"API","title":"StreamSampling.AlgL","text":"Adapted from algorithm L described in \"Random sampling with a reservoir, J. S. Vitter, 1985\".\n\n\n\n\n\n","category":"type"},{"location":"#StreamSampling.AlgR","page":"API","title":"StreamSampling.AlgR","text":"Adapted from algorithm R described in \"Random sampling with a reservoir, J. S. Vitter, 1985\".\n\n\n\n\n\n","category":"type"},{"location":"#StreamSampling.AlgRSWRSKIP","page":"API","title":"StreamSampling.AlgRSWRSKIP","text":"Adapted fron algorithm RSWR_SKIP described in \"Reservoir-based Random Sampling with Replacement from  Data Stream, B. Park et al., 2008\".\n\n\n\n\n\n","category":"type"},{"location":"#StreamSampling.AlgAExpJ","page":"API","title":"StreamSampling.AlgAExpJ","text":"Adapted from algorithm A-ExpJ described in \"Weighted random sampling with a reservoir,  P. S. Efraimidis et al., 2006\".\n\n\n\n\n\n","category":"type"},{"location":"#StreamSampling.AlgARes","page":"API","title":"StreamSampling.AlgARes","text":"Adapted from algorithm A-Res described in \"Weighted random sampling with a reservoir,  P. S. Efraimidis et al., 2006\".\n\n\n\n\n\n","category":"type"},{"location":"#StreamSampling.AlgWRSWRSKIP","page":"API","title":"StreamSampling.AlgWRSWRSKIP","text":"Adapted from algorithm WRSWR_SKIP described in \"A Skip-based Algorithm for Weighted Reservoir  Sampling with Replacement, A. Meligrana, 2024\". \n\n\n\n\n\n","category":"type"},{"location":"#StreamSampling.sortedindices_sample","page":"API","title":"StreamSampling.sortedindices_sample","text":"sortedindices_sample(rng, iter)\nsortedindices_sample(rng, iter, n; replace = false, ordered = false)\n\nAlgorithm which generates sorted random indices used to retrieve the sample  from the iterable. The number of elements in the iterable needs to be known  before starting the sampling.\n\n\n\n\n\n","category":"function"}]
}
