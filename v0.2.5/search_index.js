var documenterSearchIndex = {"docs":
[{"location":"#API","page":"API","title":"API","text":"","category":"section"},{"location":"#General-functionalities","page":"API","title":"General functionalities","text":"","category":"section"},{"location":"","page":"API","title":"API","text":"itsample","category":"page"},{"location":"#IteratorSampling.itsample","page":"API","title":"IteratorSampling.itsample","text":"itsample([rng], iter; kwargs...)\n\nReturn a random element of the iterator, optionally specifying a rng  (which defaults to Random.default_rng()). If the iterator is empty, it  returns nothing.\n\n\n\nitsample([rng], iter, n::Int; replace = false, ordered = false, kwargs...)\n\nReturn a vector of n random elements of the iterator,  optionally specifying a rng (which defaults to Random.default_rng()).\n\nreplace dictates whether sampling is performed with replacement.  ordered dictates whether an ordered sample (also called a sequential  sample, i.e. a sample where items appear in the same order as in iter).\n\nIf the iterator has less than n elements, in the case of sampling without replacement, it returns a vector of those elements.\n\n\n\n\n\n","category":"function"},{"location":"#Specific-algorithms","page":"API","title":"Specific algorithms","text":"","category":"section"},{"location":"","page":"API","title":"API","text":"reservoir_sample\nreservoir_sample_without_replacement\nreservoir_sample_with_replacement\nsortedindices_sample","category":"page"},{"location":"#IteratorSampling.reservoir_sample","page":"API","title":"IteratorSampling.reservoir_sample","text":"reservoir_sample(rng, iter; method = :alg_L)\nreservoir_sample(rng, iter, n; replace = false, ordered = false, kwargs...)\n\nReservoir sampling algorithm with and without replacement.\n\nThe method keyword can be either :alg_L or :alg_R. The optional kwargs  are passed to the more specific methods called internally by this function:  reservoir_sample_without_replacement and reservoir_sample_with_replacement.\n\n\n\n\n\n","category":"function"},{"location":"#IteratorSampling.reservoir_sample_without_replacement","page":"API","title":"IteratorSampling.reservoir_sample_without_replacement","text":"reservoir_sample_without_replacement(rng, iter, n; ordered = false, method = :alg_L)\n\nReservoir sampling algorithm without replacement. The method keyword can be either :alg_L or :alg_R.\n\nAdapted from algorithms R and L described in \"Random sampling with a reservoir, Jeffrey S. Vitter, 1985\".\n\n\n\n\n\n","category":"function"},{"location":"#IteratorSampling.reservoir_sample_with_replacement","page":"API","title":"IteratorSampling.reservoir_sample_with_replacement","text":"reservoir_sample_with_replacement(rng, iter, n; ordered = false)\n\nReservoir sampling algorithm with replacement.\n\nAdapted fron algorithm RSWR_SKIP described in \"Reservoir-based Random Sampling with Replacement from  Data Stream, Byung-Hoon Park et al., 2008\".\n\n\n\n\n\n","category":"function"},{"location":"#IteratorSampling.sortedindices_sample","page":"API","title":"IteratorSampling.sortedindices_sample","text":"sortedindices_sample(rng, iter)\nsortedindices_sample(rng, iter, n; replace = false, ordered = false)\n\nAlgorithm which generates sorted random indices used to retrieve the sample  from the iterable. The number of elements in the iterable needs to be known  before starting the sampling.\n\n\n\n\n\n","category":"function"}]
}
